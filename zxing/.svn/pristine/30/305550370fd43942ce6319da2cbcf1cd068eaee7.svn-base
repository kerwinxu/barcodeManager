###########################################################
# 
# Place codes in this file, and they will be automatically
# generated by "generate.py". Everything placed after a "#"
# will be ignored, as well as every space before and after 
# the codes and empty lines.
# 
# If a generator can't generate a code, then place: 
# -LIBRARY-. For example, if zint doesn't support a code,
# place -zint-. If neither zint or postscript support it,
# place -zint,postscript-. 
# 
# 

#################################################
# Fixed length examples

# Encodation 0111000 - 0111111

(01)90012345678908(3103)012233(15)991231  # Example taken from 7.2.5.4.4
(01)91234567980129(3103)012233(15)991231  # Testing with other AI
(01)91234567980129(3102)012233(15)991231  # Testing with 3102 instead of 3103
(01)91234567980129(3102)012233(15)000101  # January 1st, 2000

# Encodation 0100

(01)90012345678908(3103)001750  # Example taken from 7.2.5.4.2
(01)92109876543213(3103)032767  # Maximum weight value
(01)92109876543213(3103)000000  # Minimum weight value

# Encodation 0101

(01)90012345678908(3202)000156  # Example taken from 7.2.5.4.3
(01)90012345678908(3202)009999  # 9,999 has a different behaviour than 10,000
(01)90012345678908(3203)010000  # 10,000 has a different behaviour than 9,999
(01)90012345678908(3203)032767  # 10,000 has a different behaviour than 9,999

#################################################
# Variable length examples

# Encodation 01100

(01)90012345678908(3922)795    # Example taken from 7.2.5.4.5
(01)90012345678908(3922)795888888888888888888888888888888888888888888888888888  # Longer information 

# Encodation 01101 

(01)90012345678908(3932)0401234         # Example taken from 7.2.5.4.6

# These three examples don't work due to a bug in zint. It has been reported.
# However, they work with http://www.terryburton.co.uk/barcodewriter/generator/
# 
-zint-(01)90012345678908(3932)040EUR          # Testing with alphanumeric instead of numeric
-zint-(01)90012345678908(3932)04055GBP        # Testing with numeric + alphanumeric instead of only numeric
-zint-(01)90012345678908(3932)04066USD778899  # Testing with numeric + alphanumeric + numeric instead of only numeric

# Encodation 1

(01)00012345678905(10)ABC123               # Example taken from 7.2.5.4.1
(01)12345678901231(10)UNIVERSITY-OF-DEUSTO # Adding other type of information 
(01)12345678901231(10)PIRAMIDE-PROJECT     # Adding other type of information
(01)12345678901231(10)TREELOGIC            # Adding other type of information

# 
# Zint doesn't support this one because after 12A (alphanumeric) it goes back to numeric without a alpha to numeric latch
-zint-(01)98898765432106(15)991231(3103)001750(10)12A(422)123(21)123456(423)012345678901 # Adding a lot of information

# Encodation 00

# # Zint doesn't support this one because after 12A (alphanumeric) it goes back to numeric without a alpha to numeric latch
-zint-(15)991231(3103)001750(10)12A(422)123(21)123456(423)0123456789012 # Adding a lot of information
(10)5678(11)010101 # This one optimizes the last 4 bits as detailed in the end of 7.2.5.5.1 
(10)5678(11)001010
(10)567890(11)010101
(10)567(11)010101


# Other tests with special characters, such as: '*',',','-','/','.', 
# and ISO/IEC646 encodation characters
(10)1098-1234
(10)1098,1234
(10)1098/1234
(10)1098.1234
(10)1098*1234
(10)1098a1234
(10)1098!1234
(10)1098"1234
(10)1098%1234
(10)1098&1234
(10)1098'1234
(10)1098+1234
(10)1098:1234
(10)1098;1234
(10)1098<1234
(10)1098=1234
(10)1098>1234
(10)1098?1234
(10)1098_1234
(10)1098 1234

# Testing transitions

(10)123456A                # numeric -> alpha
-zint-(10)123456A1         # numeric -> alpha
-zint-(10)123456A123       # numeric -> alpha
(10)123456A1234            # numeric -> alpha -> numeric
(10)123456A1234A           # numeric -> alpha
(10)123456A123456          # numeric -> alpha -> numeric
(10)123456A12345678        # numeric -> alpha -> numeric
-zint-(10)123456A1234A(15)991231 # numeric -> alpha -> FNC1

(10)1ABCDEF;:/1234567 # numeric -> alpha -> 646 -> numeric
(10)1ABCDEF;:/ABCDEFG # numeric -> alpha -> 646 -> alpha

(10)1;:/ABCDEFGHIJKLM # numeric -> 646 -> alpha
(10)1;:/0123456789012 # numeric -> 646 -> numeric
(10)1;:/0123          # numeric -> 646
(10)1;:/0123(15)991231 # numeric -> 646 -> FNC1 numeric

# Another tests, from 7.2.5.5.2
-zint-(10)1

# Another bug in zint, it works with http://www.terryburton.co.uk/barcodewriter/generator/
-zint-(10)12A
# Another bug in zint, it works with the http://www.terryburton.co.uk/barcodewriter/generator/
-zint-(10)123

